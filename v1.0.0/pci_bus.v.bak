///////////////////////////////////////////////////////////////////////////////////////////////////
// Company: <Name>
//
// File: pci_bus.v
// File history:
//      <Revision number>: <Date>: <Comments>
//      <Revision number>: <Date>: <Comments>
//      <Revision number>: <Date>: <Comments>
//
// Description: 
//
// <Description here>
//
// Targeted device: <Family::ProASIC3> <Die::A3P600> <Package::208 PQFP>
// Author: <Name>
//
/////////////////////////////////////////////////////////////////////////////////////////////////// 

//`timescale <time_units> / <precision>

module pci_bus( 
	//* pin define
	input pci_clk, pci_rstn, pci_idsel,
	inout [31:0]pci_ad,	//inout pin
	inout pci_framen, pci_irdyn, pci_par, pci_intan, pci_trdyn, pci_stopn, pci_serrn, pci_devseln, pci_perrn,
	inout [3:0]pci_cben,
	//* user pin
	output pclk, preset,
	
	output reg [3:0] aa_mux,
	output reg [2:0] bb_mux,
	//* 时钟接口 register 1 0x010
	output reg user_reset, 
	input clock_state,
	//* 解码单元相关端口 register 2 0x020
	output reg [5:0] delay_angle_in,
	input north,
	input [15:0] timer,
	//* 数据通路相关端口 register 3 0x030
	input [15:0] ffa_rddata, ffb_rddata, ffc_rddata,
	input [2:0] ffa_rdstate, ffb_rdstate, ffc_rdstate,
	input ff_rdstb,
	output ffa_rden, ffb_rden, ffc_rden,
	//* register 4 0x040
	output reg [15:0] pf_cfar, step_cfar,
	input [15:0] statistic_cfar,
	output reg [15:0] error_mti, step_mti,
	
	output reg [15:0] thresh_hander_nv, thresh_auto_nv, thresh_hander_mti,
	//* register 5 0x050
	output reg [2:0] bus_mode,
	//* 数据处理相关端口 register 6 0x060
	output reg wrclk_dp, wren_dp,
	output reg [5:0] wraddr_dp,
	output reg [31:0] wrdata_dp,
	//* register 7 0x070
	output reg [6:0] thresh_target_start, thresh_target_end,
	//* 测试模块端口 register 8 0x080
	output reg sim_angle, sim_range, sim_speed,
	output reg [2:0] sim_mode,
	output reg [9:0] sim_target_range,
	output reg self_check
);

//*
//* PCI pin 
//* the connection of PCI wire
//* The global pin of PCI 		
	wire lreset;		//system reset, out form PCI
	wire bpclk;			//system clock, out from PCI
	
	wire wr_cyc, rd_cyc;  
	wire [31:0] data_out; 
	wire [31:0] data_in;
	wire [3:0] wr_be_now; 
	wire rd_std_out;
	wire [11:0]ma;		//memey address
	wire [2:0] bar_select;
	wire rd_stb_in;


	HPCI pci_u0( 							//@ pci core by actel
		// Inputs
		.BUSY          ( 1'b0        ),   //  When HIGH, indicating  backend  cannot complete the current transfer
		.CLK           ( pci_clk     ),
		.ERROR         ( 1'b0        ),   //  When HIGH, force the PCI core to terminate
		.EXT_INTN      ( 1'b1        ),   //  Active LOW interrupt from the backend
		.IDSEL         ( pci_idsel   ),
		.MEM_DATA_IN   ( data_in 	 ),
		.RD_STB_IN     (rd_stb_in),   // Active HIGH , indicating  backend is ready to provide data to the core
		.RD_SYNC       ( 1'b0        ),   // Null use
		.RSTN          ( pci_rstn    ),   //  
		.WR_BE_RDY     ( 1'b1        ),   // When HIGH, indicating  backend is ready to receive data from the core
	
		// Outputs
		.BAR_SELECT   ( bar_select ),     // 
		.BYTE_ENN     (            ),     // byte enable          some backend logic need 
		.BYTE_VALN    (            ),     // strobe byte enable   some backend logic need
		.CFG_STATUS   (            ),     // 
		.CLK_OUT      ( bpclk      ),     // buffered PCI clock
		.DP_DONE      ( 		   ),
		.DP_START     ( 		   ),
		.FRAMEN_OUT   (            ),
		.INTAN_OUT    (            ),
		.IRDYN_OUT    (            ),     // Buffered of pci_sign
		.MEM_ADD      ( ma         ),
		.MEM_DATA_OE  (            ),     // for bidirectional I/O
		.MEM_DATA_OUT ( data_out   ),
		.RD_CYC       ( rd_cyc     ),     // no use
		.RD_STB_OUT   ( rd_std_out ),
		.RST_OUTN     ( lreset     ), 
		.SERRN_OUT    (            ),
		.WR_BE_NOW    ( wr_be_now  ),     // byte select
		.WR_CYC       ( wr_cyc     ),     // write to local bus
	
		// Inouts
		.AD           ( pci_ad     ),
		.CBEN         ( pci_cben   ),
		.DEVSELN      ( pci_devseln),
		.FRAMEN       ( pci_framen ),
		.INTAN        ( pci_intan  ),
		.IRDYN        ( pci_irdyn  ),
		.M66EN        (            ),
		.PAR          ( pci_par    ),
		.PERRN        ( pci_perrn  ),
		.SERRN        ( pci_serrn  ),
		.STOPN        ( pci_stopn  ),
		.TRDYN        ( pci_trdyn  ));
	
//* 
//* clock reset
assign pclk = bpclk;
assign preset = lreset;
	
//* 
//* The register config
//* Enable signal
	wire wr2, rd2;
	wire [31:0]ld;

	assign   wr2 = ((bar_select [2:0] == 3'h2) && (wr_be_now[3:0]!=4'h0) && wr_cyc ) ? 1'b1 : 1'b0;
	assign   rd2 = ((bar_select [2:0] == 3'h2) && (rd_cyc )) ? 1'b1 : 1'b0;

	//* The wirte function of PCI
	//* add your use at here
	always@(posedge bpclk )begin  //   pci read funtion logic
		if( !lreset)begin  
			aa_mux <= 4'b1100; bb_mux <= 3'b100;		
		end
		else if(wr2)
			case(ma[11:2]) 
			10'h003 : aa_mux <= ld[3:0];
			10'h004 : bb_mux <= ld[2:0];
			endcase 
		else begin   
		end
	end    
		 
	//* Output bus
	assign ld  = data_out;
//////////////////////////////////////////////////////////////////////////////////////////////
//*
//* The read function of PCI
	reg [31:0]rld;
	
	//* add your use at here
	always @( * )begin  //  pci read funtion logic
		case(ma[11:2])
		10'h000 : rld <= 32'h20162016;
		default : rld <= 32'h09322016;
		endcase    
	end

 	//* Select the input bus
	assign  data_in  =  ((bar_select [2:0] == 3'h2)&&(rd_cyc ))  ? rld[31:0] : 32'hzzzzzzzz;    

//////////////////////////////////////////////////////////////////////////////////////////////

	//assign ff_rden = (rd2 && (ma[11:2]==10'h030)) ? 1'b1 : 1'b0;
	//read data enable
	assign ffa_rden = (rd2 && (ma[11:2]==10'h100)) ? 1'b1 : 1'b0;
	assign ffb_rden = (rd2 && (ma[11:2]==10'h102)) ? 1'b1 : 1'b0;
	assign ffc_rden = (rd2 && (ma[11:2]==10'h102)) ? 1'b1 : 1'b0;

	
	assign rd_stb_in = ff_rdstb;
	
	

//////////////////////////////////////////////////////////////////////////////////////////////
// interrupt
	
	// assign intn = 1'b1;
	
	
endmodule